AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: QA System with Backend, Student/Teacher Frontends, and DynamoDB

Globals:
  Function:
    Timeout: 150
    Runtime: python3.9
    MemorySize: 256
    Environment:
      Variables:

Resources:

  # === API Gateway ===
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyBackendApi
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      BinaryMediaTypes:
        - application/pdf  # もしくは application/pdf


  # === DynamoDB Tables ===
  QAItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QAitem
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: qa_id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: qa_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  QAInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QAinfo
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  QAResultTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QAresult
      AttributeDefinitions:
        - AttributeName: id_qaid
          AttributeType: S
        - AttributeName: u_id
          AttributeType: S
      KeySchema:
        - AttributeName: id_qaid
          KeyType: HASH
        - AttributeName: u_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # === Lambda Function ===
  BackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: backend-api
      CodeUri: ./backend
      Handler: main.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 150
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt QAInfoTable.Arn
                - !GetAtt QAItemTable.Arn
                - !GetAtt QAResultTable.Arn
      Events:
        ProxyApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /{proxy+}
            Method: ANY

  # === Student Frontend (S3 + CloudFront) ===
  StudentWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  StudentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StudentWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${StudentWebsiteBucket.Arn}/*"

  StudentDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: StudentS3Origin
            DomainName: !GetAtt StudentWebsiteBucket.RegionalDomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: StudentS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # === Teacher Frontend (S3 + CloudFront) ===
  TeacherWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  TeacherBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TeacherWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${TeacherWebsiteBucket.Arn}/*"

  TeacherDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: TeacherS3Origin
            DomainName: !GetAtt TeacherWebsiteBucket.RegionalDomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: TeacherS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true


  # === S3バケット ===
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-upload-bucket"
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
            AllowedHeaders:
              - "*"
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: "AutoDeleteOldFiles"
            Status: Enabled
            ExpirationInDays: 1  # 30日後に削除
      Tags:
        - Key: Purpose
          Value: "UserUploadedDocuments"



  ProcessUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: processupload-handler
      CodeUri: ./processupload
      Handler: main.lambda_handler
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-upload-bucket"
        - DynamoDBCrudPolicy:
            TableName: !Ref QAInfoTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QAItemTable
      Events:
        S3UploadTrigger:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".pdf"

Outputs:
  BackendApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub
      - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      - { ApiId: !Ref MyApi }
