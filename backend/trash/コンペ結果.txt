最終的なコンペ成績は190位/600位
評価データでは0.65まで出たが、提出データの最終評価は0.20とかなり差があった。そもそも、暫定評価の値が0.02とものすごく低く、動のように調整するかが難しかった。
かかったお金は12ドル

## 良かった点
・GPTに<answer></answer>のタグの中に入れてくださいと指示したりのタグを用いいることでかなり精度が良くなったように思える。

## 反省点
・配られた評価用のプログラムを活用できればもっと簡単に本番の環境を作成できた。
・一旦評価用でコードを書くほうがいい。GPTのトークンの節約にもなるし、提出用のことも考えながらコードもかける。
・検索自体は割とうまく行っていた。ただ１０個表示させてその中に入っているという感じなので、もっと精度良くできたかも。

次回はこの点を踏まえて、早めに動く。

## 最終提出の流れ(validがそれの評価用となる)
１．PDFをpymupdf4llmでmarkdownにする。｛pdf2textchunk_llm_api_v2.py｝
２．１で出力したmarkdownをGPTにAPIを用いて送り、意味事にまとまりのあるチャンクを生成してもらい、崩れているところを整形する。（自前のAPIを使用）｛pdf2textchunk_llm_api_v2.py｝
３．２で出力したmarkdownをべクトルに変換（AzureAPIを使用）{textchunk2vector_v2.py}
４．３で出力したベクトルをfaissのデータベース機構に格納してRAG検索をできるようにする。{generateAnswer_v2.py}
５．そのまま問題と検索結果のコンテキストを１０個貼り付けてGPTに送って回答を生成
６．５を様々なバリエーション（モデルを変えたり、パラメーターを変えたり）で３つ生成。CSVでmodel/model1-3に保存する。
７．６をアンサンブルして、最終的な回答を生成。